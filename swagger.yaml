openapi: 3.0.0
info:
  title: ToDo List API
  description: API documentation for the ToDo List application
  version: 1.0.0
servers:
  - url: http://localhost:3333/api
paths:
  /list:
    post:
      summary: Create a new list
      tags:
        - Lists
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListDto"
      responses:
        "201":
          description: List created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
    get:
      summary: Get all lists (SHOULD HAVE ROLE ADMIN, CHANGE YOUR ROLE ON THE DATABASE MANUALLY)
      tags:
        - Lists
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of lists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
  /list/{id}:
    get:
      summary: Get a list by ID
      tags:
        - Lists
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
    put:
      summary: Update a list by ID
      tags:
        - Lists
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ListDto"
      responses:
        "200":
          description: List updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
    delete:
      summary: Delete a list by ID
      tags:
        - Lists
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: List deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  /todo:
    get:
      summary: Get all todos (SHOULD HAVE ROLE ADMIN, CHANGE YOUR ROLE ON THE DATABASE MANUALLY)
      tags:
        - Todos
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of todos
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
  /todo/{id}:
    get:
      summary: Get a todo by ID
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single todo
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
    put:
      summary: Update a todo by ID
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoDto"
      responses:
        "200":
          description: ToDo updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
    delete:
      summary: Delete a todo by ID
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: ToDo deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  /todo/list/{id}:
    get:
      summary: Get all todos by list ID
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A list of todos for the specified list
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  /todo/{listId}:
    post:
      summary: Create a new todo in a list
      tags:
        - Todos
      security:
        - bearerAuth: []
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TodoDto"
      responses:
        "201":
          description: ToDo created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "400":
          description: Bad Request
  /user/:
    get:
      summary: Get all users (SHOULD HAVE ROLE ADMIN, CHANGE YOUR ROLE ON THE DATABASE MANUALLY)
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of all users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "403":
          description: Forbidden

  /user/register:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegisterDto"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "400":
          description: Bad Request
  /user/login:
    post:
      summary: Login a user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginDto"
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
  /user/recover-password:
    post:
      summary: Recover password
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserResetPasswordDto"
      responses:
        "200":
          description: Password recovery token sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "400":
          description: Bad Request
  /user/send-recover-password-token/{email}:
    post:
      summary: Send password recovery token
      tags:
        - Users
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Password recovery token sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "400":
          description: Bad Request
  /user/{id}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  /user/username/{username}:
    get:
      summary: Get a user by username
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  /user/email/{email}:
    get:
      summary: Get a user by email
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: A single user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
components:
  schemas:
    ListDto:
      type: object
      properties:
        name:
          type: string
          example: "My List"
    TodoDto:
      type: object
      properties:
        name:
          type: string
          example: "My ToDo"
        done:
          type: boolean
          example: false
    UserLoginDto:
      type: object
      properties:
        email:
          type: string
          example: "johndoe@example.com"
        password:
          type: string
          example: "password123"
    UserRegisterDto:
      type: object
      properties:
        username:
          type: string
          example: "johndoe"
        email:
          type: string
          example: "johndoe@example.com"
        password:
          type: string
          example: "password123"
        confirmPassword:
          type: string
          example: "password123"
    UserResetPasswordDto:
      type: object
      properties:
        password:
          type: string
          example: "newpassword123"
        confirmPassword:
          type: string
          example: "newpassword123"
        resetPasswordToken:
          type: string
          example: "reset-token"
    ResponseDto:
      type: object
      properties:
        status:
          type: integer
          example: 200
        message:
          type: string
          example: "Success"
        data:
          type: object
          nullable: true
        error:
          type: object
          nullable: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
